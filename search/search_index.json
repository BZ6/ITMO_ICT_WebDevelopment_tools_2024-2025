{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0417\u0430\u0445\u0430\u0440\u043a\u0438\u043d \u0411\u043e\u0433\u0434\u0430\u043d K3340 GitHub Lr1 Repository Practice 1 Practice 2 Practice 3 Lr2 Repository Lr3 Repository","title":"Home"},{"location":"#k3340","text":"","title":"\u0417\u0430\u0445\u0430\u0440\u043a\u0438\u043d \u0411\u043e\u0433\u0434\u0430\u043d K3340"},{"location":"#github","text":"Lr1 Repository Practice 1 Practice 2 Practice 3 Lr2 Repository Lr3 Repository","title":"GitHub"},{"location":"Lr1/","text":"Welcome GitHub Repository Practice 1 Practice 2 Practice 3","title":"Home"},{"location":"Lr1/#welcome","text":"","title":"Welcome"},{"location":"Lr1/#github","text":"Repository Practice 1 Practice 2 Practice 3","title":"GitHub"},{"location":"Lr1/auth/","text":"Authentication Module This module provides functions for password hashing, token creation, and token decoding. Functions get_password_hash Hashes a plaintext password using bcrypt. Parameters: password (str): The plaintext password to hash. Returns: str : The hashed password. verify_password Verifies a plaintext password against a hashed password. Parameters: plain_password (str): The plaintext password to verify. hashed_password (str): The hashed password to verify against. Returns: bool : True if the passwords match, False otherwise. create_access_token Creates a JWT access token. Parameters: data (str): The data to include in the token payload. expiry (timedelta, optional): The token expiry time. Defaults to 60 minutes. refresh (bool, optional): Whether the token is a refresh token. Defaults to False . Returns: str : The encoded JWT token. decode_token Decodes a JWT token and returns its payload. Parameters: token (str): The JWT token to decode. Returns: dict : The token payload. Raises: HTTPException : If the token is expired, invalid, or not yet valid. Dependencies The dependencies.py file provides classes for token validation and verification. TokenBearer A base class for token validation. Methods: __call__ : Validates the token from the request header. token_valid : Checks if the token is valid. verify_token_data : Abstract method to be overridden in child classes. AccessTokenBearer A class for access token validation. Methods: verify_token_data : Verifies the token data.","title":"Auth"},{"location":"Lr1/auth/#authentication-module","text":"This module provides functions for password hashing, token creation, and token decoding.","title":"Authentication Module"},{"location":"Lr1/auth/#functions","text":"","title":"Functions"},{"location":"Lr1/auth/#get_password_hash","text":"Hashes a plaintext password using bcrypt. Parameters: password (str): The plaintext password to hash. Returns: str : The hashed password.","title":"get_password_hash"},{"location":"Lr1/auth/#verify_password","text":"Verifies a plaintext password against a hashed password. Parameters: plain_password (str): The plaintext password to verify. hashed_password (str): The hashed password to verify against. Returns: bool : True if the passwords match, False otherwise.","title":"verify_password"},{"location":"Lr1/auth/#create_access_token","text":"Creates a JWT access token. Parameters: data (str): The data to include in the token payload. expiry (timedelta, optional): The token expiry time. Defaults to 60 minutes. refresh (bool, optional): Whether the token is a refresh token. Defaults to False . Returns: str : The encoded JWT token.","title":"create_access_token"},{"location":"Lr1/auth/#decode_token","text":"Decodes a JWT token and returns its payload. Parameters: token (str): The JWT token to decode. Returns: dict : The token payload. Raises: HTTPException : If the token is expired, invalid, or not yet valid.","title":"decode_token"},{"location":"Lr1/auth/#dependencies","text":"The dependencies.py file provides classes for token validation and verification.","title":"Dependencies"},{"location":"Lr1/auth/#tokenbearer","text":"A base class for token validation. Methods: __call__ : Validates the token from the request header. token_valid : Checks if the token is valid. verify_token_data : Abstract method to be overridden in child classes.","title":"TokenBearer"},{"location":"Lr1/auth/#accesstokenbearer","text":"A class for access token validation. Methods: verify_token_data : Verifies the token data.","title":"AccessTokenBearer"},{"location":"Lr1/models/","text":"Database Models ScheduleTaskDefault schedule_id : Foreign key to Schedule task_id : Foreign key to Task UserDefault first_name : String last_name : String username : String email : String PriorityDefault name : String TaskDefault description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User TimeEntryDefault task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer ScheduleDefault user_id : Foreign key to User date : DateTime NotificationDefault task_id : Foreign key to Task message : String sent_at : DateTime User id : Primary key first_name : String last_name : String username : String password_hash : String email : String tasks : Relationship with Task schedules : Relationship with Schedule UserInner username : String email : String tasks : List of Task schedules : List of Schedule UserCreate first_name : String last_name : String username : String email : String password : String UserLogin username : String password : String UserJWTResponse first_name : String last_name : String username : String email : String password : String access_token : String UserResponse first_name : String last_name : String username : String email : String Priority id : Primary key name : String tasks : Relationship with Task PriorityInner name : String tasks : List of Task Task id : Primary key description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User priority : Relationship with Priority user : Relationship with User time_entries : Relationship with TimeEntry notifications : Relationship with Notification schedules : Relationship with Schedule through ScheduleTask TaskInner description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User priority : Priority user : List of User time_entries : List of TimeEntry notifications : List of Notification schedules : List of Schedule TimeEntry id : Primary key task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer task : Relationship with Task TimeEntryInner task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer task : Task Schedule id : Primary key user_id : Foreign key to User date : DateTime user : Relationship with User tasks : Relationship with Task through ScheduleTask ScheduleInner user_id : Foreign key to User date : DateTime user : User tasks : List of Task Notification id : Primary key task_id : Foreign key to Task message : String sent_at : DateTime task : Relationship with Task NotificationInner task_id : Foreign key to Task message : String sent_at : DateTime task : Task ScheduleTask schedule_id : Foreign key to Schedule task_id : Foreign key to Task added_at : DateTime","title":"Models"},{"location":"Lr1/models/#database-models","text":"","title":"Database Models"},{"location":"Lr1/models/#scheduletaskdefault","text":"schedule_id : Foreign key to Schedule task_id : Foreign key to Task","title":"ScheduleTaskDefault"},{"location":"Lr1/models/#userdefault","text":"first_name : String last_name : String username : String email : String","title":"UserDefault"},{"location":"Lr1/models/#prioritydefault","text":"name : String","title":"PriorityDefault"},{"location":"Lr1/models/#taskdefault","text":"description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User","title":"TaskDefault"},{"location":"Lr1/models/#timeentrydefault","text":"task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer","title":"TimeEntryDefault"},{"location":"Lr1/models/#scheduledefault","text":"user_id : Foreign key to User date : DateTime","title":"ScheduleDefault"},{"location":"Lr1/models/#notificationdefault","text":"task_id : Foreign key to Task message : String sent_at : DateTime","title":"NotificationDefault"},{"location":"Lr1/models/#user","text":"id : Primary key first_name : String last_name : String username : String password_hash : String email : String tasks : Relationship with Task schedules : Relationship with Schedule","title":"User"},{"location":"Lr1/models/#userinner","text":"username : String email : String tasks : List of Task schedules : List of Schedule","title":"UserInner"},{"location":"Lr1/models/#usercreate","text":"first_name : String last_name : String username : String email : String password : String","title":"UserCreate"},{"location":"Lr1/models/#userlogin","text":"username : String password : String","title":"UserLogin"},{"location":"Lr1/models/#userjwtresponse","text":"first_name : String last_name : String username : String email : String password : String access_token : String","title":"UserJWTResponse"},{"location":"Lr1/models/#userresponse","text":"first_name : String last_name : String username : String email : String","title":"UserResponse"},{"location":"Lr1/models/#priority","text":"id : Primary key name : String tasks : Relationship with Task","title":"Priority"},{"location":"Lr1/models/#priorityinner","text":"name : String tasks : List of Task","title":"PriorityInner"},{"location":"Lr1/models/#task","text":"id : Primary key description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User priority : Relationship with Priority user : Relationship with User time_entries : Relationship with TimeEntry notifications : Relationship with Notification schedules : Relationship with Schedule through ScheduleTask","title":"Task"},{"location":"Lr1/models/#taskinner","text":"description : String deadline : DateTime priority_id : Foreign key to Priority user_id : Foreign key to User priority : Priority user : List of User time_entries : List of TimeEntry notifications : List of Notification schedules : List of Schedule","title":"TaskInner"},{"location":"Lr1/models/#timeentry","text":"id : Primary key task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer task : Relationship with Task","title":"TimeEntry"},{"location":"Lr1/models/#timeentryinner","text":"task_id : Foreign key to Task start_time : DateTime end_time : DateTime duration : Integer task : Task","title":"TimeEntryInner"},{"location":"Lr1/models/#schedule","text":"id : Primary key user_id : Foreign key to User date : DateTime user : Relationship with User tasks : Relationship with Task through ScheduleTask","title":"Schedule"},{"location":"Lr1/models/#scheduleinner","text":"user_id : Foreign key to User date : DateTime user : User tasks : List of Task","title":"ScheduleInner"},{"location":"Lr1/models/#notification","text":"id : Primary key task_id : Foreign key to Task message : String sent_at : DateTime task : Relationship with Task","title":"Notification"},{"location":"Lr1/models/#notificationinner","text":"task_id : Foreign key to Task message : String sent_at : DateTime task : Task","title":"NotificationInner"},{"location":"Lr1/models/#scheduletask","text":"schedule_id : Foreign key to Schedule task_id : Foreign key to Task added_at : DateTime","title":"ScheduleTask"},{"location":"Lr1/tests/","text":"Tests Documentation This document provides an overview of the test cases for the application. Each test case is designed to verify the functionality of various endpoints and ensure that the application behaves as expected. Test Files conftest.py This file contains fixtures and configurations for the test environment. pytest_sessionstart : Hook to check database connectivity before running tests. test_db_engine : Fixture to create and drop the test database schema. test_db_session : Fixture to provide a database session for each test. test_client : Fixture to provide a test client for making HTTP requests. test_task.py This file contains tests for the task-related endpoints. test_create_task : Tests the creation of a new task. test_get_tasks : Tests retrieving all tasks. test_get_task : Tests retrieving a single task by ID. test_update_task : Tests updating an existing task. test_delete_task : Tests deleting a task. test_schedule_task.py This file contains tests for the schedule task-related endpoints. test_create_schedule_task : Tests the creation of a new schedule task. test_get_schedule_tasks : Tests retrieving all schedule tasks. test_get_schedule_task : Tests retrieving a single schedule task by schedule ID and task ID. test_delete_schedule_task : Tests deleting a schedule task. test_auth.py This file contains tests for the authentication-related endpoints. test_register_user : Tests user registration. test_login_user : Tests user login. test_get_info_current_user : Tests retrieving information about the current user. test_reset_password_user : Tests resetting a user's password. test_notification.py This file contains tests for the notification-related endpoints. test_create_notification : Tests the creation of a new notification. test_get_notifications : Tests retrieving all notifications. test_get_notification : Tests retrieving a single notification by ID. test_update_notification : Tests updating an existing notification. test_delete_notification : Tests deleting a notification. test_priority.py This file contains tests for the priority-related endpoints. test_create_priority : Tests the creation of a new priority. test_get_priorities : Tests retrieving all priorities. test_get_priority : Tests retrieving a single priority by ID. test_update_priority : Tests updating an existing priority. test_delete_priority : Tests deleting a priority. test_schedule.py This file contains tests for the schedule-related endpoints. test_create_schedule : Tests the creation of a new schedule. test_get_schedules : Tests retrieving all schedules. test_get_schedule : Tests retrieving a single schedule by ID. test_update_schedule : Tests updating an existing schedule. test_delete_schedule : Tests deleting a schedule. test_user.py This file contains tests for the user-related endpoints. test_create_user : Tests the creation of a new user. test_get_users : Tests retrieving all users. test_get_user : Tests retrieving a single user by ID. test_update_user : Tests updating an existing user. test_delete_user : Tests deleting a user. test_time_entry.py This file contains tests for the time entry-related endpoints. test_create_time_entry : Tests the creation of a new time entry. test_get_time_entries : Tests retrieving all time entries. test_get_time_entry : Tests retrieving a single time entry by ID. test_update_time_entry : Tests updating an existing time entry. test_delete_time_entry : Tests deleting a time entry.","title":"Tests"},{"location":"Lr1/tests/#tests-documentation","text":"This document provides an overview of the test cases for the application. Each test case is designed to verify the functionality of various endpoints and ensure that the application behaves as expected.","title":"Tests Documentation"},{"location":"Lr1/tests/#test-files","text":"","title":"Test Files"},{"location":"Lr1/tests/#conftestpy","text":"This file contains fixtures and configurations for the test environment. pytest_sessionstart : Hook to check database connectivity before running tests. test_db_engine : Fixture to create and drop the test database schema. test_db_session : Fixture to provide a database session for each test. test_client : Fixture to provide a test client for making HTTP requests.","title":"conftest.py"},{"location":"Lr1/tests/#test_taskpy","text":"This file contains tests for the task-related endpoints. test_create_task : Tests the creation of a new task. test_get_tasks : Tests retrieving all tasks. test_get_task : Tests retrieving a single task by ID. test_update_task : Tests updating an existing task. test_delete_task : Tests deleting a task.","title":"test_task.py"},{"location":"Lr1/tests/#test_schedule_taskpy","text":"This file contains tests for the schedule task-related endpoints. test_create_schedule_task : Tests the creation of a new schedule task. test_get_schedule_tasks : Tests retrieving all schedule tasks. test_get_schedule_task : Tests retrieving a single schedule task by schedule ID and task ID. test_delete_schedule_task : Tests deleting a schedule task.","title":"test_schedule_task.py"},{"location":"Lr1/tests/#test_authpy","text":"This file contains tests for the authentication-related endpoints. test_register_user : Tests user registration. test_login_user : Tests user login. test_get_info_current_user : Tests retrieving information about the current user. test_reset_password_user : Tests resetting a user's password.","title":"test_auth.py"},{"location":"Lr1/tests/#test_notificationpy","text":"This file contains tests for the notification-related endpoints. test_create_notification : Tests the creation of a new notification. test_get_notifications : Tests retrieving all notifications. test_get_notification : Tests retrieving a single notification by ID. test_update_notification : Tests updating an existing notification. test_delete_notification : Tests deleting a notification.","title":"test_notification.py"},{"location":"Lr1/tests/#test_prioritypy","text":"This file contains tests for the priority-related endpoints. test_create_priority : Tests the creation of a new priority. test_get_priorities : Tests retrieving all priorities. test_get_priority : Tests retrieving a single priority by ID. test_update_priority : Tests updating an existing priority. test_delete_priority : Tests deleting a priority.","title":"test_priority.py"},{"location":"Lr1/tests/#test_schedulepy","text":"This file contains tests for the schedule-related endpoints. test_create_schedule : Tests the creation of a new schedule. test_get_schedules : Tests retrieving all schedules. test_get_schedule : Tests retrieving a single schedule by ID. test_update_schedule : Tests updating an existing schedule. test_delete_schedule : Tests deleting a schedule.","title":"test_schedule.py"},{"location":"Lr1/tests/#test_userpy","text":"This file contains tests for the user-related endpoints. test_create_user : Tests the creation of a new user. test_get_users : Tests retrieving all users. test_get_user : Tests retrieving a single user by ID. test_update_user : Tests updating an existing user. test_delete_user : Tests deleting a user.","title":"test_user.py"},{"location":"Lr1/tests/#test_time_entrypy","text":"This file contains tests for the time entry-related endpoints. test_create_time_entry : Tests the creation of a new time entry. test_get_time_entries : Tests retrieving all time entries. test_get_time_entry : Tests retrieving a single time entry by ID. test_update_time_entry : Tests updating an existing time entry. test_delete_time_entry : Tests deleting a time entry.","title":"test_time_entry.py"},{"location":"Lr1/api/generic/","text":"generic.py The generic.py file contains generic functions for performing CRUD (Create, Read, Update, Delete) operations on database objects. These functions are designed to work with SQLModel and FastAPI to provide a flexible and reusable way to interact with different models in the database. Functions create_object(session: Session, input_model: InputModel, output_model: Type[OutputModel]) -> Response[OutputModel] Creates a new object in the database. read_object_list(session: Session, output_model: Type[OutputModel]) -> list[OutputModel] Retrieves a list of all objects from the database. read_object(session: Session, id: int, output_model: Type[OutputModel]) -> OutputModel Retrieves a single object by its ID from the database. update_object(session: Session, id: int, input_model: InputModel, output_model: Type[OutputModel]) -> InputModel Updates an existing object in the database by its ID. delete_object(session: Session, id: int, output_model: Type[OutputModel]) -> dict Deletes an object by its ID from the database. Classes Response(TypedDict, Generic[OutputModel]) A generic response class used to standardize API responses. Code from typing import Generic, Type, TypedDict from fastapi import HTTPException from sqlmodel import Session, select from models.default import InputModel, OutputModel class Response(TypedDict, Generic[OutputModel]): status: int data: OutputModel def create_object(session: Session, input_model: InputModel, output_model: Type[OutputModel]) -> Response[OutputModel]: output_instance = output_model.model_validate(input_model) session.add(output_instance) session.commit() session.refresh(output_instance) return {\"status\": 201, \"data\": output_instance} def read_object_list(session: Session, output_model: Type[OutputModel]) -> list[OutputModel]: return session.exec(select(output_model)).all() def read_object(session: Session, id: int, output_model: Type[OutputModel]) -> OutputModel: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") return output_instance def update_object(session: Session, id: int, input_model: InputModel, output_model: Type[OutputModel]) -> InputModel: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") output_data = input_model.model_dump(exclude_unset=True) for key, value in output_data.items(): setattr(output_instance, key, value) session.add(output_instance) session.commit() session.refresh(output_instance) return output_instance def delete_object(session: Session, id: int, output_model: Type[OutputModel]) -> dict: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") session.delete(output_instance) session.commit() return {\"ok\": True}","title":"Generic functions"},{"location":"Lr1/api/generic/#genericpy","text":"The generic.py file contains generic functions for performing CRUD (Create, Read, Update, Delete) operations on database objects. These functions are designed to work with SQLModel and FastAPI to provide a flexible and reusable way to interact with different models in the database.","title":"generic.py"},{"location":"Lr1/api/generic/#functions","text":"create_object(session: Session, input_model: InputModel, output_model: Type[OutputModel]) -> Response[OutputModel] Creates a new object in the database. read_object_list(session: Session, output_model: Type[OutputModel]) -> list[OutputModel] Retrieves a list of all objects from the database. read_object(session: Session, id: int, output_model: Type[OutputModel]) -> OutputModel Retrieves a single object by its ID from the database. update_object(session: Session, id: int, input_model: InputModel, output_model: Type[OutputModel]) -> InputModel Updates an existing object in the database by its ID. delete_object(session: Session, id: int, output_model: Type[OutputModel]) -> dict Deletes an object by its ID from the database.","title":"Functions"},{"location":"Lr1/api/generic/#classes","text":"Response(TypedDict, Generic[OutputModel]) A generic response class used to standardize API responses.","title":"Classes"},{"location":"Lr1/api/generic/#code","text":"from typing import Generic, Type, TypedDict from fastapi import HTTPException from sqlmodel import Session, select from models.default import InputModel, OutputModel class Response(TypedDict, Generic[OutputModel]): status: int data: OutputModel def create_object(session: Session, input_model: InputModel, output_model: Type[OutputModel]) -> Response[OutputModel]: output_instance = output_model.model_validate(input_model) session.add(output_instance) session.commit() session.refresh(output_instance) return {\"status\": 201, \"data\": output_instance} def read_object_list(session: Session, output_model: Type[OutputModel]) -> list[OutputModel]: return session.exec(select(output_model)).all() def read_object(session: Session, id: int, output_model: Type[OutputModel]) -> OutputModel: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") return output_instance def update_object(session: Session, id: int, input_model: InputModel, output_model: Type[OutputModel]) -> InputModel: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") output_data = input_model.model_dump(exclude_unset=True) for key, value in output_data.items(): setattr(output_instance, key, value) session.add(output_instance) session.commit() session.refresh(output_instance) return output_instance def delete_object(session: Session, id: int, output_model: Type[OutputModel]) -> dict: output_instance = session.get(output_model, id) if not output_instance: raise HTTPException(status_code=404, detail=f\"{output_model.__name__} not found\") session.delete(output_instance) session.commit() return {\"ok\": True}","title":"Code"},{"location":"Lr1/api/notifications/","text":"Notifications API Endpoints Create Notification Create a new notification. URL : /notifications Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: NotificationDefault : Object containing notification details. Request Example: { \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" } } Get Notifications Retrieve a list of all notifications. URL : /notifications Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" }, { \"id\": 2, \"task_id\": 2, \"message\": \"Meeting reminder\", \"sent_at\": \"2023-10-02T12:00:00Z\" } ] Get Notification Retrieve a notification by ID. URL : /notifications/{notification_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" } Update Notification Update a notification by ID. URL : /notifications/{notification_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: NotificationDefault : Object containing updated notification details. Request Example: { \"message\": \"Updated task reminder\", \"sent_at\": \"2023-10-01T13:00:00Z\" } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"message\": \"Updated task reminder\", \"sent_at\": \"2023-10-01T13:00:00Z\" } Delete Notification Delete a notification by ID. URL : /notifications/{notification_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Notifications"},{"location":"Lr1/api/notifications/#notifications-api","text":"","title":"Notifications API"},{"location":"Lr1/api/notifications/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/notifications/#create-notification","text":"Create a new notification. URL : /notifications Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: NotificationDefault : Object containing notification details. Request Example: { \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" }","title":"Create Notification"},{"location":"Lr1/api/notifications/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" } }","title":"Success Responses"},{"location":"Lr1/api/notifications/#get-notifications","text":"Retrieve a list of all notifications. URL : /notifications Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Notifications"},{"location":"Lr1/api/notifications/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" }, { \"id\": 2, \"task_id\": 2, \"message\": \"Meeting reminder\", \"sent_at\": \"2023-10-02T12:00:00Z\" } ]","title":"Success Responses"},{"location":"Lr1/api/notifications/#get-notification","text":"Retrieve a notification by ID. URL : /notifications/{notification_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Notification"},{"location":"Lr1/api/notifications/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"message\": \"Task reminder\", \"sent_at\": \"2023-10-01T12:00:00Z\" }","title":"Success Responses"},{"location":"Lr1/api/notifications/#update-notification","text":"Update a notification by ID. URL : /notifications/{notification_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: NotificationDefault : Object containing updated notification details. Request Example: { \"message\": \"Updated task reminder\", \"sent_at\": \"2023-10-01T13:00:00Z\" }","title":"Update Notification"},{"location":"Lr1/api/notifications/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"message\": \"Updated task reminder\", \"sent_at\": \"2023-10-01T13:00:00Z\" }","title":"Success Responses"},{"location":"Lr1/api/notifications/#delete-notification","text":"Delete a notification by ID. URL : /notifications/{notification_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Notification"},{"location":"Lr1/api/notifications/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/priorities/","text":"Priorities API Endpoints Create Priority Create a new priority. URL : /priorities Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: PriorityDefault : Object containing priority details. Request Example: { \"name\": \"High\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"name\": \"High\" } } Get Priorities Retrieve a list of all priorities. URL : /priorities Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"name\": \"High\" }, { \"id\": 2, \"name\": \"Medium\" } ] Get Priority Retrieve a priority by ID. URL : /priorities/{priority_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"name\": \"High\" } Update Priority Update a priority by ID. URL : /priorities/{priority_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: PriorityDefault : Object containing updated priority details. Request Example: { \"name\": \"High Updated\" } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"name\": \"High Updated\" } Delete Priority Delete a priority by ID. URL : /priorities/{priority_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Priorities"},{"location":"Lr1/api/priorities/#priorities-api","text":"","title":"Priorities API"},{"location":"Lr1/api/priorities/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/priorities/#create-priority","text":"Create a new priority. URL : /priorities Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: PriorityDefault : Object containing priority details. Request Example: { \"name\": \"High\" }","title":"Create Priority"},{"location":"Lr1/api/priorities/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"name\": \"High\" } }","title":"Success Responses"},{"location":"Lr1/api/priorities/#get-priorities","text":"Retrieve a list of all priorities. URL : /priorities Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Priorities"},{"location":"Lr1/api/priorities/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"name\": \"High\" }, { \"id\": 2, \"name\": \"Medium\" } ]","title":"Success Responses"},{"location":"Lr1/api/priorities/#get-priority","text":"Retrieve a priority by ID. URL : /priorities/{priority_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Priority"},{"location":"Lr1/api/priorities/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"name\": \"High\" }","title":"Success Responses"},{"location":"Lr1/api/priorities/#update-priority","text":"Update a priority by ID. URL : /priorities/{priority_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: PriorityDefault : Object containing updated priority details. Request Example: { \"name\": \"High Updated\" }","title":"Update Priority"},{"location":"Lr1/api/priorities/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"name\": \"High Updated\" }","title":"Success Responses"},{"location":"Lr1/api/priorities/#delete-priority","text":"Delete a priority by ID. URL : /priorities/{priority_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Priority"},{"location":"Lr1/api/priorities/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/schedule_tasks/","text":"Schedule Tasks API Endpoints Create Schedule Task Create a new schedule task. URL : /schedule_tasks/{schedule_id}/{task_id} Method : POST Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" } } Get Schedule Tasks Retrieve a list of all schedule tasks. URL : /schedule_tasks Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" }, { \"schedule_id\": 2, \"task_id\": 2, \"added_at\": \"2023-10-02T12:00:00Z\" } ] Get Schedule Task Retrieve a schedule task by schedule ID and task ID. URL : /schedule_tasks/{schedule_id}/{task_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" } Delete Schedule Task Delete a schedule task by schedule ID and task ID. URL : /schedule_tasks/{schedule_id}/{task_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Schedule Tasks"},{"location":"Lr1/api/schedule_tasks/#schedule-tasks-api","text":"","title":"Schedule Tasks API"},{"location":"Lr1/api/schedule_tasks/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/schedule_tasks/#create-schedule-task","text":"Create a new schedule task. URL : /schedule_tasks/{schedule_id}/{task_id} Method : POST Auth required : NO Permissions required : None Data constraints : {}","title":"Create Schedule Task"},{"location":"Lr1/api/schedule_tasks/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" } }","title":"Success Responses"},{"location":"Lr1/api/schedule_tasks/#get-schedule-tasks","text":"Retrieve a list of all schedule tasks. URL : /schedule_tasks Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Schedule Tasks"},{"location":"Lr1/api/schedule_tasks/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" }, { \"schedule_id\": 2, \"task_id\": 2, \"added_at\": \"2023-10-02T12:00:00Z\" } ]","title":"Success Responses"},{"location":"Lr1/api/schedule_tasks/#get-schedule-task","text":"Retrieve a schedule task by schedule ID and task ID. URL : /schedule_tasks/{schedule_id}/{task_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Schedule Task"},{"location":"Lr1/api/schedule_tasks/#success-responses_2","text":"Code : 200 OK Content : {} { \"schedule_id\": 1, \"task_id\": 1, \"added_at\": \"2023-10-01T12:00:00Z\" }","title":"Success Responses"},{"location":"Lr1/api/schedule_tasks/#delete-schedule-task","text":"Delete a schedule task by schedule ID and task ID. URL : /schedule_tasks/{schedule_id}/{task_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Schedule Task"},{"location":"Lr1/api/schedule_tasks/#success-responses_3","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/schedules/","text":"Schedules API Endpoints Create Schedule Create a new schedule. URL : /schedules Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: ScheduleDefault : Object containing schedule details. Request Example: { \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } } Get Schedules Retrieve a list of all schedules. URL : /schedules Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }, { \"id\": 2, \"user_id\": 2, \"date\": \"2023-10-02T00:00:00\" } ] Get Schedule Retrieve a schedule by ID. URL : /schedules/{schedule_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } Update Schedule Update a schedule by ID. URL : /schedules/{schedule_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: ScheduleDefault : Object containing updated schedule details. Request Example: { \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } Delete Schedule Delete a schedule by ID. URL : /schedules/{schedule_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Schedules"},{"location":"Lr1/api/schedules/#schedules-api","text":"","title":"Schedules API"},{"location":"Lr1/api/schedules/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/schedules/#create-schedule","text":"Create a new schedule. URL : /schedules Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: ScheduleDefault : Object containing schedule details. Request Example: { \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }","title":"Create Schedule"},{"location":"Lr1/api/schedules/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" } }","title":"Success Responses"},{"location":"Lr1/api/schedules/#get-schedules","text":"Retrieve a list of all schedules. URL : /schedules Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Schedules"},{"location":"Lr1/api/schedules/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }, { \"id\": 2, \"user_id\": 2, \"date\": \"2023-10-02T00:00:00\" } ]","title":"Success Responses"},{"location":"Lr1/api/schedules/#get-schedule","text":"Retrieve a schedule by ID. URL : /schedules/{schedule_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Schedule"},{"location":"Lr1/api/schedules/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }","title":"Success Responses"},{"location":"Lr1/api/schedules/#update-schedule","text":"Update a schedule by ID. URL : /schedules/{schedule_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: ScheduleDefault : Object containing updated schedule details. Request Example: { \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }","title":"Update Schedule"},{"location":"Lr1/api/schedules/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"user_id\": 1, \"date\": \"2023-10-01T00:00:00\" }","title":"Success Responses"},{"location":"Lr1/api/schedules/#delete-schedule","text":"Delete a schedule by ID. URL : /schedules/{schedule_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Schedule"},{"location":"Lr1/api/schedules/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/tasks/","text":"Tasks API Endpoints Create Task Create a new task. URL : /tasks Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: TaskDefault : Object containing task details. Request Example: { \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } } Get Tasks Retrieve a list of all tasks. URL : /tasks Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }, { \"id\": 2, \"description\": \"Prepare presentation\", \"deadline\": \"2023-11-30T23:59:59\", \"priority_id\": 2, \"user_id\": 2 } ] Get Task Retrieve a task by ID. URL : /tasks/{task_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } Update Task Update a task by ID. URL : /tasks/{task_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: TaskDefault : Object containing updated task details. Request Example: { \"description\": \"Complete project updated\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"description\": \"Complete project updated\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } Delete Task Delete a task by ID. URL : /tasks/{task_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Tasks"},{"location":"Lr1/api/tasks/#tasks-api","text":"","title":"Tasks API"},{"location":"Lr1/api/tasks/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/tasks/#create-task","text":"Create a new task. URL : /tasks Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: TaskDefault : Object containing task details. Request Example: { \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }","title":"Create Task"},{"location":"Lr1/api/tasks/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 } }","title":"Success Responses"},{"location":"Lr1/api/tasks/#get-tasks","text":"Retrieve a list of all tasks. URL : /tasks Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Tasks"},{"location":"Lr1/api/tasks/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }, { \"id\": 2, \"description\": \"Prepare presentation\", \"deadline\": \"2023-11-30T23:59:59\", \"priority_id\": 2, \"user_id\": 2 } ]","title":"Success Responses"},{"location":"Lr1/api/tasks/#get-task","text":"Retrieve a task by ID. URL : /tasks/{task_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Task"},{"location":"Lr1/api/tasks/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"description\": \"Complete project\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }","title":"Success Responses"},{"location":"Lr1/api/tasks/#update-task","text":"Update a task by ID. URL : /tasks/{task_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: TaskDefault : Object containing updated task details. Request Example: { \"description\": \"Complete project updated\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }","title":"Update Task"},{"location":"Lr1/api/tasks/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"description\": \"Complete project updated\", \"deadline\": \"2023-12-31T23:59:59\", \"priority_id\": 1, \"user_id\": 1 }","title":"Success Responses"},{"location":"Lr1/api/tasks/#delete-task","text":"Delete a task by ID. URL : /tasks/{task_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Task"},{"location":"Lr1/api/tasks/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/time_entries/","text":"Time Entries API Endpoints Create Time Entry Create a new time entry. URL : /time_entries Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: TimeEntryDefault : Object containing time entry details. Request Example: { \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } } Get Time Entries Retrieve a list of all time entries. URL : /time_entries Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }, { \"id\": 2, \"task_id\": 2, \"start_time\": \"2023-10-02T09:00:00\", \"end_time\": \"2023-10-02T17:00:00\", \"duration\": 480 } ] Get Time Entry Retrieve a time entry by ID. URL : /time_entries/{time_entry_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } Update Time Entry Update a time entry by ID. URL : /time_entries/{time_entry_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: TimeEntryDefault : Object containing updated time entry details. Request Example: { \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } Delete Time Entry Delete a time entry by ID. URL : /time_entries/{time_entry_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Time Entries"},{"location":"Lr1/api/time_entries/#time-entries-api","text":"","title":"Time Entries API"},{"location":"Lr1/api/time_entries/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/time_entries/#create-time-entry","text":"Create a new time entry. URL : /time_entries Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: TimeEntryDefault : Object containing time entry details. Request Example: { \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }","title":"Create Time Entry"},{"location":"Lr1/api/time_entries/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 } }","title":"Success Responses"},{"location":"Lr1/api/time_entries/#get-time-entries","text":"Retrieve a list of all time entries. URL : /time_entries Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Time Entries"},{"location":"Lr1/api/time_entries/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }, { \"id\": 2, \"task_id\": 2, \"start_time\": \"2023-10-02T09:00:00\", \"end_time\": \"2023-10-02T17:00:00\", \"duration\": 480 } ]","title":"Success Responses"},{"location":"Lr1/api/time_entries/#get-time-entry","text":"Retrieve a time entry by ID. URL : /time_entries/{time_entry_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Time Entry"},{"location":"Lr1/api/time_entries/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }","title":"Success Responses"},{"location":"Lr1/api/time_entries/#update-time-entry","text":"Update a time entry by ID. URL : /time_entries/{time_entry_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: TimeEntryDefault : Object containing updated time entry details. Request Example: { \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }","title":"Update Time Entry"},{"location":"Lr1/api/time_entries/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"task_id\": 1, \"start_time\": \"2023-10-01T09:00:00\", \"end_time\": \"2023-10-01T17:00:00\", \"duration\": 480 }","title":"Success Responses"},{"location":"Lr1/api/time_entries/#delete-time-entry","text":"Delete a time entry by ID. URL : /time_entries/{time_entry_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete Time Entry"},{"location":"Lr1/api/time_entries/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/users/","text":"Users API Endpoints Me API Create User Create a new user. URL : /users Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserDefault : Object containing user details. Request Example: { \"username\": \"john_doe\", \"email\": \"john@example.com\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" } } Get Users Retrieve a list of all users. URL : /users Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" }, { \"id\": 2, \"username\": \"jane_doe\", \"email\": \"jane@example.com\" } ] Get User Retrieve a user by ID. URL : /users/{user_id} Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" } Update User Update a user by ID. URL : /users/{user_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: UserDefault : Object containing updated user details. Request Example: { \"username\": \"john_doe_updated\", \"email\": \"john_updated@example.com\" } Success Responses Code : 200 OK Content : {} { \"id\": 1, \"username\": \"john_doe_updated\", \"email\": \"john_updated@example.com\" } Delete User Delete a user by ID. URL : /users/{user_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {} { \"ok\": true }","title":"Users"},{"location":"Lr1/api/users/#users-api","text":"","title":"Users API"},{"location":"Lr1/api/users/#endpoints","text":"Me API","title":"Endpoints"},{"location":"Lr1/api/users/#create-user","text":"Create a new user. URL : /users Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserDefault : Object containing user details. Request Example: { \"username\": \"john_doe\", \"email\": \"john@example.com\" }","title":"Create User"},{"location":"Lr1/api/users/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" } }","title":"Success Responses"},{"location":"Lr1/api/users/#get-users","text":"Retrieve a list of all users. URL : /users Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get Users"},{"location":"Lr1/api/users/#success-responses_1","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" }, { \"id\": 2, \"username\": \"jane_doe\", \"email\": \"jane@example.com\" } ]","title":"Success Responses"},{"location":"Lr1/api/users/#get-user","text":"Retrieve a user by ID. URL : /users/{user_id} Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"Get User"},{"location":"Lr1/api/users/#success-responses_2","text":"Code : 200 OK Content : {} { \"id\": 1, \"username\": \"john_doe\", \"email\": \"john@example.com\" }","title":"Success Responses"},{"location":"Lr1/api/users/#update-user","text":"Update a user by ID. URL : /users/{user_id} Method : PATCH Auth required : NO Permissions required : None Data constraints : {} Request Body: UserDefault : Object containing updated user details. Request Example: { \"username\": \"john_doe_updated\", \"email\": \"john_updated@example.com\" }","title":"Update User"},{"location":"Lr1/api/users/#success-responses_3","text":"Code : 200 OK Content : {} { \"id\": 1, \"username\": \"john_doe_updated\", \"email\": \"john_updated@example.com\" }","title":"Success Responses"},{"location":"Lr1/api/users/#delete-user","text":"Delete a user by ID. URL : /users/{user_id} Method : DELETE Auth required : NO Permissions required : None Data constraints : {}","title":"Delete User"},{"location":"Lr1/api/users/#success-responses_4","text":"Code : 200 OK Content : {} { \"ok\": true }","title":"Success Responses"},{"location":"Lr1/api/users/me/","text":"Me API Endpoints Register User Register a new user. URL : /users/me/register Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserCreate : Object containing user creation details. Request Example: { \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": null } } Login User Login user. URL : /users/me/login Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserLogin : Object containing user login details. Request Example: { \"username\": \"john_doe\", \"password\": \"securepassword\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYm9iYSIsImV4cCI6MTc0MzI0ODU5MSwicmVmcmVzaCI6ZmFsc2V9.WuvI0wNefcyGajtcXAkBvKoUQdfipg4QYNmyYI4ax88\" } } Password User Reset password for user. URL : /users/me/password Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserLogin : Object containing user login details. Request Example: { \"username\": \"john_doe\", \"password\": \"newsecurepassword\" } Success Responses Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": null } } Current User Reset password for user. URL : /users/me/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 Ok Content : {} { \"status\": 200, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\" } }","title":"Auth users"},{"location":"Lr1/api/users/me/#me-api","text":"","title":"Me API"},{"location":"Lr1/api/users/me/#endpoints","text":"","title":"Endpoints"},{"location":"Lr1/api/users/me/#register-user","text":"Register a new user. URL : /users/me/register Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserCreate : Object containing user creation details. Request Example: { \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\" }","title":"Register User"},{"location":"Lr1/api/users/me/#success-responses","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": null } }","title":"Success Responses"},{"location":"Lr1/api/users/me/#login-user","text":"Login user. URL : /users/me/login Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserLogin : Object containing user login details. Request Example: { \"username\": \"john_doe\", \"password\": \"securepassword\" }","title":"Login User"},{"location":"Lr1/api/users/me/#success-responses_1","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYm9iYSIsImV4cCI6MTc0MzI0ODU5MSwicmVmcmVzaCI6ZmFsc2V9.WuvI0wNefcyGajtcXAkBvKoUQdfipg4QYNmyYI4ax88\" } }","title":"Success Responses"},{"location":"Lr1/api/users/me/#password-user","text":"Reset password for user. URL : /users/me/password Method : POST Auth required : NO Permissions required : None Data constraints : {} Request Body: UserLogin : Object containing user login details. Request Example: { \"username\": \"john_doe\", \"password\": \"newsecurepassword\" }","title":"Password User"},{"location":"Lr1/api/users/me/#success-responses_2","text":"Code : 201 Created Content : {} { \"status\": 201, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"securepassword\", \"access_token\": null } }","title":"Success Responses"},{"location":"Lr1/api/users/me/#current-user","text":"Reset password for user. URL : /users/me/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"Current User"},{"location":"Lr1/api/users/me/#success-responses_3","text":"Code : 200 Ok Content : {} { \"status\": 200, \"data\": { \"id\": 1, \"first_name\": \"john\", \"last_name\": \"doe\", \"username\": \"john_doe\", \"email\": \"john@example.com\" } }","title":"Success Responses"},{"location":"Lr1/db/database_connection/","text":"Connection to database Database connection is established using SQLModel and SQLAlchemy. The connection is configured using environment variables. connection.py from sqlmodel import SQLModel, Session, create_engine from models.models import User, Priority, Task, ScheduleTask, TimeEntry, Schedule, Notification import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"Database conecton"},{"location":"Lr1/db/database_connection/#connection-to-database","text":"Database connection is established using SQLModel and SQLAlchemy. The connection is configured using environment variables.","title":"Connection to database"},{"location":"Lr1/db/database_connection/#connectionpy","text":"from sqlmodel import SQLModel, Session, create_engine from models.models import User, Priority, Task, ScheduleTask, TimeEntry, Schedule, Notification import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DB_ADMIN') engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"connection.py"},{"location":"Lr1/db/database_schema/","text":"Database Schema User id : Integer, Primary Key first_name : String last_name : String username : String email : String password_hash : String Priority id : Integer, Primary Key name : String Task id : Integer, Primary Key description : String deadline : DateTime priority_id : Integer, Foreign Key user_id : Integer, Foreign Key Schedule id : Integer, Primary Key user_id : Integer, Foreign Key date : DateTime ScheduleTask schedule_id : Integer, Foreign Key, Primary Key task_id : Integer, Foreign Key, Primary Key added_at : DateTime TimeEntry id : Integer, Primary Key task_id : Integer, Foreign Key start_time : DateTime end_time : DateTime duration : Integer Notification id : Integer, Primary Key task_id : Integer, Foreign Key message : String sent_at : DateTime","title":"Database Schema"},{"location":"Lr1/db/database_schema/#database-schema","text":"","title":"Database Schema"},{"location":"Lr1/db/database_schema/#user","text":"id : Integer, Primary Key first_name : String last_name : String username : String email : String password_hash : String","title":"User"},{"location":"Lr1/db/database_schema/#priority","text":"id : Integer, Primary Key name : String","title":"Priority"},{"location":"Lr1/db/database_schema/#task","text":"id : Integer, Primary Key description : String deadline : DateTime priority_id : Integer, Foreign Key user_id : Integer, Foreign Key","title":"Task"},{"location":"Lr1/db/database_schema/#schedule","text":"id : Integer, Primary Key user_id : Integer, Foreign Key date : DateTime","title":"Schedule"},{"location":"Lr1/db/database_schema/#scheduletask","text":"schedule_id : Integer, Foreign Key, Primary Key task_id : Integer, Foreign Key, Primary Key added_at : DateTime","title":"ScheduleTask"},{"location":"Lr1/db/database_schema/#timeentry","text":"id : Integer, Primary Key task_id : Integer, Foreign Key start_time : DateTime end_time : DateTime duration : Integer","title":"TimeEntry"},{"location":"Lr1/db/database_schema/#notification","text":"id : Integer, Primary Key task_id : Integer, Foreign Key message : String sent_at : DateTime","title":"Notification"},{"location":"Lr2/","text":"Welcome GitHub Repository","title":"Home"},{"location":"Lr2/#welcome","text":"","title":"Welcome"},{"location":"Lr2/#github","text":"Repository","title":"GitHub"},{"location":"Lr2/task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. asyncio import asyncio from consts import MAX_NUMBER, NUM_TASKS from utils import timer_decorator, get_end_index async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = MAX_NUMBER // NUM_TASKS @timer_decorator(\"async\") async def exec(): for i in range(NUM_TASKS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_TASKS) task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) return sum(results) await exec() if __name__ == \"__main__\": asyncio.run(main()) multiprocessing import multiprocessing from consts import MAX_NUMBER, NUM_PROCESSES from utils import timer_decorator, get_end_index def calculate_sum(start, end, result_queue): total = 0 for i in range(start, end): total += i result_queue.put(total) def main(): processes = [] result_queue = multiprocessing.Queue() chunk_size = MAX_NUMBER // NUM_PROCESSES @timer_decorator(\"multiprocessing\") def exec(): for i in range(NUM_PROCESSES): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_PROCESSES) process = multiprocessing.Process(target=calculate_sum, args=(start, end, result_queue)) processes.append(process) for process in processes: process.start() for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() return total_sum exec() if __name__ == \"__main__\": main() threading import threading from consts import MAX_NUMBER, NUM_THREADS from utils import timer_decorator, get_end_index def calculate_sum(start, end, result, index): total = 0 for i in range(start, end): total += i result[index] = total def main(): threads = [] result = [0] * NUM_THREADS chunk_size = MAX_NUMBER // NUM_THREADS @timer_decorator(\"threading\") def exec(): for i in range(NUM_THREADS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_THREADS) thread = threading.Thread(target=calculate_sum, args=(start, end, result, i)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() return sum(result) exec() if __name__ == \"__main__\": main() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0414\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0414\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0414\u043b\u044f \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043e\u0431\u0445\u043e\u0434\u0438\u0442 GIL \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u044f\u0434\u0440\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432. \u041d\u043e \u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0431\u0440\u0430\u0442\u044c \u0443\u0436\u0435 async \u0438\u043b\u0438 threading (\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f), \u0442\u0430\u043a \u043a\u0430\u043a, \u0432\u0438\u0434\u0438\u043c\u043e, \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430.","title":"Task 1"},{"location":"Lr2/task1/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"Lr2/task1/#asyncio","text":"import asyncio from consts import MAX_NUMBER, NUM_TASKS from utils import timer_decorator, get_end_index async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = MAX_NUMBER // NUM_TASKS @timer_decorator(\"async\") async def exec(): for i in range(NUM_TASKS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_TASKS) task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) return sum(results) await exec() if __name__ == \"__main__\": asyncio.run(main())","title":"asyncio"},{"location":"Lr2/task1/#multiprocessing","text":"import multiprocessing from consts import MAX_NUMBER, NUM_PROCESSES from utils import timer_decorator, get_end_index def calculate_sum(start, end, result_queue): total = 0 for i in range(start, end): total += i result_queue.put(total) def main(): processes = [] result_queue = multiprocessing.Queue() chunk_size = MAX_NUMBER // NUM_PROCESSES @timer_decorator(\"multiprocessing\") def exec(): for i in range(NUM_PROCESSES): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_PROCESSES) process = multiprocessing.Process(target=calculate_sum, args=(start, end, result_queue)) processes.append(process) for process in processes: process.start() for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() return total_sum exec() if __name__ == \"__main__\": main()","title":"multiprocessing"},{"location":"Lr2/task1/#threading","text":"import threading from consts import MAX_NUMBER, NUM_THREADS from utils import timer_decorator, get_end_index def calculate_sum(start, end, result, index): total = 0 for i in range(start, end): total += i result[index] = total def main(): threads = [] result = [0] * NUM_THREADS chunk_size = MAX_NUMBER // NUM_THREADS @timer_decorator(\"threading\") def exec(): for i in range(NUM_THREADS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_THREADS) thread = threading.Thread(target=calculate_sum, args=(start, end, result, i)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() return sum(result) exec() if __name__ == \"__main__\": main()","title":"threading"},{"location":"Lr2/task1/#_1","text":"\u0414\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0414\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lr2/task1/#_2","text":"\u0414\u043b\u044f \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043e\u0431\u0445\u043e\u0434\u0438\u0442 GIL \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u044f\u0434\u0440\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432. \u041d\u043e \u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0431\u0440\u0430\u0442\u044c \u0443\u0436\u0435 async \u0438\u043b\u0438 threading (\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f), \u0442\u0430\u043a \u043a\u0430\u043a, \u0432\u0438\u0434\u0438\u043c\u043e, \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Lr2/task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. models from sqlmodel import Field, SQLModel class WebPage(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) url: str title: str parse and save for async from bs4 import BeautifulSoup from connection_async import SessionLocal_async from models import WebPage async def parse_and_save_async(url, session): try: async with session.get(url) as response: text = await response.text() soup = BeautifulSoup(text, 'html.parser') title = soup.title.string if soup.title else 'No title' async with SessionLocal_async() as db_session: page = WebPage(url=url, title=title) db_session.add(page) await db_session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\") asyncio import aiohttp import asyncio import time from urls import urls from parse_and_save_async import parse_and_save_async from connection_async import init_db_async async def main(): await init_db_async() async with aiohttp.ClientSession() as session: tasks = [parse_and_save_async(url, session) for url in urls] await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() print(f\"Async execution time: {end_time - start_time} seconds\") parse and save from bs4 import BeautifulSoup import requests from connection import SessionLocal from models import WebPage def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string if soup.title else 'No title' with SessionLocal() as session: page = WebPage(url=url, title=title) session.add(page) session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\") multiprocessing import multiprocessing import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() processes = [] start_time = time.time() for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) for process in processes: process.start() for process in processes: process.join() end_time = time.time() print(f\"Multiprocessing execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main() threading import threading import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() threads = [] start_time = time.time() for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u044f\u0442\u0438 \u0441\u0430\u0439\u0442\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0422\u0443\u0442 \u0443\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 async \u0438 threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0430 multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0437\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435 \u0431\u044b\u043b\u043e, \u043d\u043e \u0434\u043b\u044f 5 \u0441\u0430\u0439\u0442\u043e\u0432 \u0432\u044b\u0448\u0435\u043b \u0432\u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0445\u043e\u0434 threading, \u0447\u0442\u043e \u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0430\u043a \u0438 \u043d\u0435 \u0441\u043c\u043e\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0432, \u044f \u0443\u0437\u043d\u0430\u043b, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 aiohttp \u0438 \u0438\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u0443\u0447\u0435\u0441\u0442\u044c. \u0413\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0430 \u0433\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u043a\u0441\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u0438\u0442\u044c, \u0445\u043e\u0442\u044f \u044f \u0435\u0433\u043e \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u043d\u043e \u0432\u0441\u0435 \u0436\u0435, \u043a\u0430\u043a \u0444\u0430\u043a\u0442.","title":"Task 2"},{"location":"Lr2/task2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"Lr2/task2/#models","text":"from sqlmodel import Field, SQLModel class WebPage(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) url: str title: str","title":"models"},{"location":"Lr2/task2/#parse-and-save-for-async","text":"from bs4 import BeautifulSoup from connection_async import SessionLocal_async from models import WebPage async def parse_and_save_async(url, session): try: async with session.get(url) as response: text = await response.text() soup = BeautifulSoup(text, 'html.parser') title = soup.title.string if soup.title else 'No title' async with SessionLocal_async() as db_session: page = WebPage(url=url, title=title) db_session.add(page) await db_session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\")","title":"parse and save for async"},{"location":"Lr2/task2/#asyncio","text":"import aiohttp import asyncio import time from urls import urls from parse_and_save_async import parse_and_save_async from connection_async import init_db_async async def main(): await init_db_async() async with aiohttp.ClientSession() as session: tasks = [parse_and_save_async(url, session) for url in urls] await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() print(f\"Async execution time: {end_time - start_time} seconds\")","title":"asyncio"},{"location":"Lr2/task2/#parse-and-save","text":"from bs4 import BeautifulSoup import requests from connection import SessionLocal from models import WebPage def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string if soup.title else 'No title' with SessionLocal() as session: page = WebPage(url=url, title=title) session.add(page) session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\")","title":"parse and save"},{"location":"Lr2/task2/#multiprocessing","text":"import multiprocessing import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() processes = [] start_time = time.time() for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) for process in processes: process.start() for process in processes: process.join() end_time = time.time() print(f\"Multiprocessing execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main()","title":"multiprocessing"},{"location":"Lr2/task2/#threading","text":"import threading import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() threads = [] start_time = time.time() for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main()","title":"threading"},{"location":"Lr2/task2/#_1","text":"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u044f\u0442\u0438 \u0441\u0430\u0439\u0442\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lr2/task2/#_2","text":"\u0422\u0443\u0442 \u0443\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 async \u0438 threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0430 multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0437\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435 \u0431\u044b\u043b\u043e, \u043d\u043e \u0434\u043b\u044f 5 \u0441\u0430\u0439\u0442\u043e\u0432 \u0432\u044b\u0448\u0435\u043b \u0432\u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0445\u043e\u0434 threading, \u0447\u0442\u043e \u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0430\u043a \u0438 \u043d\u0435 \u0441\u043c\u043e\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0432, \u044f \u0443\u0437\u043d\u0430\u043b, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 aiohttp \u0438 \u0438\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u0443\u0447\u0435\u0441\u0442\u044c. \u0413\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0430 \u0433\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u043a\u0441\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u0438\u0442\u044c, \u0445\u043e\u0442\u044f \u044f \u0435\u0433\u043e \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u043d\u043e \u0432\u0441\u0435 \u0436\u0435, \u043a\u0430\u043a \u0444\u0430\u043a\u0442.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Lr3/","text":"Welcome GitHub Repository","title":"Home"},{"location":"Lr3/#welcome","text":"","title":"Welcome"},{"location":"Lr3/#github","text":"Repository","title":"GitHub"},{"location":"Lr3/task1/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0440\u0430\u0437 \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 1, \u0442\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0442\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f\u043c, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0437\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u043d\u0435 \u0433\u043e\u043d\u0438\u043c\u0441\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, HTTPException, status from pydantic import BaseModel import requests from src.parse_and_save import parse_and_save from src.connection import init_db app = FastAPI() class ParseRequest(BaseModel): url: str @app.on_event(\"startup\") def on_startup(): init_db() @app.post(\"/parse\") def parse(request: ParseRequest): try: response = requests.get(request.url) response.raise_for_status() parse_and_save(request.url) return {\"message\": \"Parsing completed\"} except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile: \u0417\u0434\u0435\u0441\u044c \u044f \u0440\u0435\u0448\u0438\u043b \u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0437\u044b \u0432 docker-compose. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430: services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web volumes: postgres-data: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","title":"Task 1"},{"location":"Lr3/task1/#1-fastapi-docker","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0440\u0430\u0437 \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 1, \u0442\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0442\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f\u043c, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0437\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u043d\u0435 \u0433\u043e\u043d\u0438\u043c\u0441\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, HTTPException, status from pydantic import BaseModel import requests from src.parse_and_save import parse_and_save from src.connection import init_db app = FastAPI() class ParseRequest(BaseModel): url: str @app.on_event(\"startup\") def on_startup(): init_db() @app.post(\"/parse\") def parse(request: ParseRequest): try: response = requests.get(request.url) response.raise_for_status() parse_and_save(request.url) return {\"message\": \"Parsing completed\"} except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile: \u0417\u0434\u0435\u0441\u044c \u044f \u0440\u0435\u0448\u0438\u043b \u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0437\u044b \u0432 docker-compose. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430: services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web volumes: postgres-data:","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"Lr3/task1/#_1","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lr3/task2/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. from fastapi import APIRouter, HTTPException, status import requests router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") def parse_site(url: str): try: response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0445\u043e\u0441\u0442\u0430 \u0432 URL, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c docker-compose, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0442\u044c \u0438 \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (parser). \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u0438 \u0432 docker-compose, \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438 \u0431\u0435\u0437 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u0435\u0442\u044c.","title":"Task 2"},{"location":"Lr3/task2/#2-fastapi","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. from fastapi import APIRouter, HTTPException, status import requests router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") def parse_site(url: str): try: response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0445\u043e\u0441\u0442\u0430 \u0432 URL, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c docker-compose, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0442\u044c \u0438 \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (parser). \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u0438 \u0432 docker-compose, \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438 \u0431\u0435\u0437 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u0435\u0442\u044c.","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"Lr3/task3/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Redis \u0438 \u0421elery pip install redis celery \u0421elery config \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 \u0434\u043b\u044f \u0421elery. \u041d\u0430\u0434\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c include=['src.task'] , \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0434\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (sheduler). from celery import Celery app = Celery('sheduler', broker='redis://redis:6379/0', backend='redis://redis:6379/0', include=['src.task']) app.conf.update( result_expires=3600, task_serializer='json', accept_content=['application/json'], result_serializer='json', timezone='UTC', enable_utc=True, ) if __name__ == '__main__': app.start() \u0421elery task \u041f\u0438\u0448\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 Celery, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441 \u0441\u044e\u0434\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. import requests from src.celery_config import app @app.task def parse_url(url: str): response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() Docker compose \u041c\u0435\u043d\u044f\u0435\u043c docker-compose.yml . \u0417\u0430\u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0431\u044b \u0431\u044b\u043b\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0435\u0440\u0432\u0438\u0441\u044b celery-worker \u0438 redis . services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data networks: - sheduler-network redis: image: redis:latest container_name: redis ports: - \"6379:6379\" networks: - sheduler-network sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser - redis networks: - sheduler-network parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web networks: - sheduler-network celery-worker: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && celery -A src.celery_config worker --loglevel=info\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt depends_on: - redis - postgres-web networks: - sheduler-network networks: sheduler-network: volumes: postgres-data: Parser endpoint \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b \u0438 \u043e\u0442\u043e\u0448\u0435\u043b \u043e\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u043e \u043c\u043d\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f, \u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u044f \u043d\u0435 \u0445\u043e\u0442\u0435\u043b. \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0432\u0435\u0442 task.id, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0432 \u0441\u0438\u043b\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u043b\u043e\u0445\u043e. from fastapi import APIRouter, HTTPException, status from celery.result import AsyncResult from asyncio import sleep from src.task import parse_url router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") async def parse_site(url: str): try: task = parse_url.apply_async((url,)) result = AsyncResult(task.id) # \u041d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 # \u0442\u0430\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0443\u0441\u0442\u044c \u0442\u0430\u0441\u043a\u0430 \u043f\u043e\u0441\u043f\u0438\u0442 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0435\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u044c while not result.ready(): await sleep(1) if not result.successful(): raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=result.result) return result.result except Exception as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 shedule \u0427\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432 \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 docker-compose \u0412\u044b\u0432\u043e\u0434 \u0421\u0430\u043c\u044b\u043c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u0441\u0435\u0442\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 docker compose, \u0430 \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043d\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0437\u0430\u043c\u044b\u0441\u043b\u043e\u0432\u0430\u0442\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443, \u0438 Celery, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u0447\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"Task 3"},{"location":"Lr3/task3/#3-fastapi","text":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Redis \u0438 \u0421elery pip install redis celery","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"Lr3/task3/#elery-config","text":"\u041f\u0438\u0448\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 \u0434\u043b\u044f \u0421elery. \u041d\u0430\u0434\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c include=['src.task'] , \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0434\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (sheduler). from celery import Celery app = Celery('sheduler', broker='redis://redis:6379/0', backend='redis://redis:6379/0', include=['src.task']) app.conf.update( result_expires=3600, task_serializer='json', accept_content=['application/json'], result_serializer='json', timezone='UTC', enable_utc=True, ) if __name__ == '__main__': app.start()","title":"\u0421elery config"},{"location":"Lr3/task3/#elery-task","text":"\u041f\u0438\u0448\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 Celery, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441 \u0441\u044e\u0434\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. import requests from src.celery_config import app @app.task def parse_url(url: str): response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json()","title":"\u0421elery task"},{"location":"Lr3/task3/#docker-compose","text":"\u041c\u0435\u043d\u044f\u0435\u043c docker-compose.yml . \u0417\u0430\u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0431\u044b \u0431\u044b\u043b\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0435\u0440\u0432\u0438\u0441\u044b celery-worker \u0438 redis . services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data networks: - sheduler-network redis: image: redis:latest container_name: redis ports: - \"6379:6379\" networks: - sheduler-network sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser - redis networks: - sheduler-network parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web networks: - sheduler-network celery-worker: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && celery -A src.celery_config worker --loglevel=info\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt depends_on: - redis - postgres-web networks: - sheduler-network networks: sheduler-network: volumes: postgres-data:","title":"Docker compose"},{"location":"Lr3/task3/#parser-endpoint","text":"\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b \u0438 \u043e\u0442\u043e\u0448\u0435\u043b \u043e\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u043e \u043c\u043d\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f, \u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u044f \u043d\u0435 \u0445\u043e\u0442\u0435\u043b. \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0432\u0435\u0442 task.id, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0432 \u0441\u0438\u043b\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u043b\u043e\u0445\u043e. from fastapi import APIRouter, HTTPException, status from celery.result import AsyncResult from asyncio import sleep from src.task import parse_url router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") async def parse_site(url: str): try: task = parse_url.apply_async((url,)) result = AsyncResult(task.id) # \u041d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 # \u0442\u0430\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0443\u0441\u0442\u044c \u0442\u0430\u0441\u043a\u0430 \u043f\u043e\u0441\u043f\u0438\u0442 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0435\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u044c while not result.ready(): await sleep(1) if not result.successful(): raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=result.result) return result.result except Exception as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))","title":"Parser endpoint"},{"location":"Lr3/task3/#_1","text":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 shedule \u0427\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432 \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 docker-compose","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lr3/task3/#_2","text":"\u0421\u0430\u043c\u044b\u043c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u0441\u0435\u0442\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 docker compose, \u0430 \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043d\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0437\u0430\u043c\u044b\u0441\u043b\u043e\u0432\u0430\u0442\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443, \u0438 Celery, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u0447\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0412\u044b\u0432\u043e\u0434"}]}